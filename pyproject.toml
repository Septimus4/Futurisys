[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "energy-prediction-api"
version = "0.1.0"
description = "Energy Use Prediction API (FastAPI + PostgreSQL + scikit-learn)"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "UNLICENSED"}
authors = [{name = "Unknown"}]
dependencies = [
    "fastapi==0.110.2",
    "uvicorn[standard]==0.29.0",
    "pydantic==2.7.1",
    "pydantic-settings==2.2.1",
    "SQLAlchemy==2.0.29",
    "psycopg[binary,pool]==3.1.18",
    "alembic==1.13.1",
    "scikit-learn==1.4.2",
    "pandas==2.2.2",
    "joblib==1.4.0",
    "structlog==24.1.0",
    "python-json-logger==2.0.7",
    "httpx==0.27.0",
    "orjson==3.10.3",
    "numpy==1.26.4",
]

[project.optional-dependencies]
dev = [
    "pytest==8.2.1",
    "pytest-cov==5.0.0",
    "pytest-asyncio==0.23.6",
    "ruff==0.4.2",
    "requests==2.32.5",
]

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
exclude = ["tests*"]

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = [
    "E", "F",
    "I",
    "B",
    "UP",
    "N",
    "ANN",
    "ASYNC",
    "S",
    "C4",
    "SIM",
    "PLC", "PLE", "PLR", "PLW",
    "RUF",
]
ignore = [
    "S101",
    "ANN101", "ANN102",  # self and cls annotations not required
    "B008",
    "PLR2004",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ANN001", "ANN201"]
"src/train_stub.py" = ["N803"]  # Allow sklearn naming convention (X, y)

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
allow-star-arg-any = false

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.pytest.ini_options]
addopts = "-q"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "src/train_stub.py",  # Training script not included in coverage
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstract",
]
show_missing = true
precision = 2
fail_under = 75

[tool.coverage.html]
directory = "htmlcov"
